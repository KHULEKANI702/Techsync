/*
        ìãú  Ôº¢ÔºØÔº¥ ÔºÆÔº°Ôº≠Ôº• ‚á©
         
          ùóçùñæùñºùóÅùóåùóíùóáùñº
         
       ìãú Ôº¢ÔºØÔº¥ ÔºØÔº∑ÔºÆÔº•Ôº≤ ‚á©
         
         ùóÑùóÅùóéùóÖùñæùóÑùñ∫ùóáùóÇ ùñΩùóéùñªùñæ
         
       ìãú Ôº§Ôº•Ôº∂Ôº•Ôº¨ÔºØÔº∞Ôº•Ôº≤ ‚á©
         
         ùóÑùóÅùóéùóÖùñæùóÑùñ∫ùóáùóÇ ùñΩùóéùñªùñæ
         
       ìãú Ôº§Ôº•Ôº∂ Ôº¨ÔºØÔº£Ôº°Ôº¥Ôº©ÔºØÔºÆ ‚á©
         
         ùóìùóÇùóÜùñªùñ∫ùñªùóêùñæ,ùñªùóéùóÖùñ∫ùóêùñ∫ùóíùóà
         
       ìãú Ôº¥Ôº•Ôº°Ôº≠ ÔºÆÔº°Ôº≠Ôº• ‚á©
         
         ùóçùñæùñºùóÅùóÄùóéùóíùóå
         
*/




const config = require('../config');
const { cmd, commands } = require('../command');

cmd({
    pattern: "ping",
    alias: ["speed","pong"],use: '.ping',
    desc: "Check bot's response time.",
    category: "main",
    react: "‚ö°",
    filename: __filename
},
async (conn, mek, m, { from, quoted, sender, reply }) => {
    try {
        const start = new Date().getTime();

        const reactionEmojis = ['üî•', '‚ö°', 'üöÄ', 'üí®', 'üéØ', 'üéâ', 'üåü', 'üí•', 'üïê', 'üîπ'];
        const textEmojis = ['üíé', 'üèÜ', '‚ö°Ô∏è', 'üöÄ', 'üé∂', 'üå†', 'üåÄ', 'üî±', 'üõ°Ô∏è', '‚ú®'];

        const reactionEmoji = reactionEmojis[Math.floor(Math.random() * reactionEmojis.length)];
        let textEmoji = textEmojis[Math.floor(Math.random() * textEmojis.length)];

        // Ensure reaction and text emojis are different
        while (textEmoji === reactionEmoji) {
            textEmoji = textEmojis[Math.floor(Math.random() * textEmojis.length)];
        }

        // Send reaction using conn.sendMessage()
        await conn.sendMessage(from, {
            react: { text: textEmoji, key: mek.key }
        });

        const end = new Date().getTime();
        const responseTime = (end - start) / 1000;

        const text = `> *·¥õ·¥á·¥Ñ ús è…¥·¥Ñ-·¥ç·¥Ö  ô·¥è·¥õ s·¥ò·¥á·¥á·¥Ö : ${responseTime.toFixed(2)}·¥çs ${reactionEmoji}*`;

        await conn.sendMessage(from, {
            text,
            contextInfo: {
                mentionedJid: [sender],
                forwardingScore: 999,
                isForwarded: true,
                forwardedNewsletterMessageInfo: {
                    newsletterJid: '120363411325763461@newsletter',
                    newsletterName: 'ùñ≥ùñæùñºùóÅùóåùóíùóáùñº~ùñ¨ùñ£ ùñØùóÇùóáùóÄ',
                    serverMessageId: 143
                }
            }
        }, { quoted: mek });

    } catch (e) {
        console.error("*Error in ping command:*", e);
        reply(`*An error occurred: ${e.message}*`);
    }
});

// ping2 

cmd({
    pattern: "ping2",
    desc: "Check bot's response time.",
    category: "main",
    react: "üçÇ",
    filename: __filename
},
async (conn, mek, m, { from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply }) => {
    try {
        const startTime = Date.now()
        const message = await conn.sendMessage(from, { text: '> *·¥õ·¥á·¥Ñ ús è…¥·¥Ñ-·¥ç·¥Ö ·¥ò…™…¥…¢…™…¥…¢...*' })
        const endTime = Date.now()
        const ping = endTime - startTime
        await conn.sendMessage(from, { text: `> *‚ö°Ô∏è ·¥õ·¥á·¥Ñ ús è…¥·¥Ñ-·¥ç·¥Ö- ô·¥è·¥õ s·¥ò·¥á·¥á·¥Ö : ${ping}·¥çs*` }, { quoted: message })
    } catch (e) {
        console.log(e)
        reply(`${e}`)
    }
})
