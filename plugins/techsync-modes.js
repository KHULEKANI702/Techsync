const config = require('../config')
const {cmd , commands} = require('../command')
const os = require("os")


cmd({
    pattern: "modes",
    alias: ["modes"],
    desc: "change modes of the bot",
    react: "‚öô",
    category: "owner"

},
async (conn, mek, m, { from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply }) => {
    try {
        let desc = `
        
‚ï≠‚îÄ‚îÄ‚îÅ‚óä‚ö°‚öô  ·¥õ·¥á·¥Ñ ús è…¥·¥Ñ-·¥ç·¥Ö s·¥á·¥õ·¥õ…™…¥…¢s ‚öô‚ö°
‚îÇ
‚îÇ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ
‚îÇ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ
‚îÇ
‚îÇüíº ·¥°·¥è Ä·¥ã ·¥ç·¥è·¥Ö·¥á : ·¥ò·¥ú ô ü…™·¥Ñüåé-·¥ò Ä…™·¥†·¥Ä·¥õ·¥á.…¥·¥è …™…¥ ô·¥èx  ú·¥á Ä·¥á.
‚îÇüîä ·¥Ä·¥ú·¥õ·¥è ·¥†·¥è…™·¥Ñ·¥á : ‚ôª ·¥è…¥/·¥è∆í∆í
‚îÇüìù ·¥Ä·¥ú·¥õ·¥è s·¥õ·¥Ä·¥õ·¥ús : ‚ôª ·¥è…¥/·¥è∆í∆í
‚îÇüìã ·¥Ä·¥ú·¥õ·¥è  ô…™·¥è : ‚ôª ·¥è…¥/·¥è∆í∆í
‚îÇ‚å® ·¥Ä·¥ú·¥õ·¥è ·¥õ è·¥ò…™…¥…¢ : ‚ôª ·¥è…¥/·¥è∆í∆í
‚îÇüõ† ·¥Ä·¥ú·¥õ·¥è  Ä·¥á·¥Ä·¥Ö ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö : ‚ôª ·¥è…¥/·¥è∆í∆í
‚îó‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ‚óä

   üîó  *·¥Ñ·¥ús·¥õ·¥è·¥ç…™·¥¢·¥á  è·¥è·¥ú Ä s·¥á·¥õ·¥õ…™…¥…¢s* ‚§µ
   
‚∏ï‚∏ï‚üù‚üù  Ä·¥á·¥ò ü è ·¥°…™·¥õ ú ·¥õ ú·¥á …¥·¥ú·¥ç ô·¥á Ä  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è s·¥á ü·¥á·¥Ñ·¥õ

    üîß ·¥è·¥ò·¥õ…™·¥è…¥s ·¥ç·¥á…¥·¥ú üîß

‚î£‚îÅ ·¥°·¥è Ä·¥ã ·¥ç·¥è·¥Ö·¥á ‚§µ
‚îÉ   ‚î£ 1.1 üîπ ·¥ò·¥ú ô ü…™·¥Ñ ·¥ç·¥è·¥Ö·¥á
‚îÉ   ‚î£ 1.2 üîπ ·¥ò Ä…™·¥†·¥Ä·¥õ·¥á ·¥ç·¥è·¥Ö·¥á
‚îÉ   ‚î£ 1.3 üîπ …¢ Ä·¥è·¥ú·¥ò ·¥è…¥ ü è
‚îÉ   ‚îó 1.4 üîπ …™…¥ ô·¥èx ·¥è…¥ ü è

‚î£‚îÅ ·¥Ä·¥ú·¥õ·¥è ·¥†·¥è…™·¥Ñ·¥á ‚§µ
‚îÉ   ‚î£ 2.1 üîä ·¥Ä·¥ú·¥õ·¥è ·¥†·¥è…™·¥Ñ·¥á ·¥è…¥
‚îÉ   ‚îó 2.2 üîï ·¥Ä·¥ú·¥õ·¥è ·¥†·¥è…™·¥Ñ·¥á ·¥è∆í∆í

‚î£‚îÅ ·¥Ä·¥ú·¥õ·¥è s·¥õ·¥Ä·¥õ·¥ús s·¥á·¥á…¥ ‚§µ
‚îÉ   ‚î£ 3.1 üëÅ‚Äçüó® ·¥Ä·¥ú·¥õ·¥è  Ä·¥á·¥Ä·¥Ö s·¥õ·¥Ä·¥õ·¥ús ·¥è…¥
‚îÉ   ‚îó 3.2 üëÅ ·¥Ä·¥ú·¥õ·¥è  Ä·¥á·¥Ä·¥Ö s·¥õ·¥Ä·¥õ·¥ús ·¥è∆í∆í

‚î£‚îÅ ·¥Ä·¥ú·¥õ·¥è  ô·¥è…™ ‚§µ
‚îÉ   ‚î£ 4.1 ‚úç ·¥Ä·¥ú·¥õ·¥è  ô…™·¥è ·¥è…¥
‚îÉ   ‚îó 4.2 ‚úç ·¥Ä·¥ú·¥õ·¥è  ô…™·¥è ·¥è∆í∆í

‚î£‚îÅ ·¥Ä·¥ú·¥õ·¥è ·¥õ è·¥ò…™…¥…¢ ‚§µ
‚îÉ   ‚î£ 6.1 üìù ·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á ·¥Ä·¥ú·¥õ·¥è ·¥õ è·¥ò…™…¥…¢
‚îÉ   ‚îó 6.2 üìù ·¥Ö·¥á·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á ·¥Ä·¥ú·¥õ·¥è ·¥õ è·¥ò…™…¥…¢

‚î£‚îÅ ·¥Ä·¥ú·¥õ·¥è ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö  Ä·¥á·¥Ä·¥Ö ‚§µ
‚îÉ   ‚î£ 7.1 üñä ·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á ·¥Ä·¥ú·¥õ·¥è ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö  Ä·¥á·¥Ä·¥Ö
‚îÉ   ‚îó 7.2 üñä ·¥Ö·¥á·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á ·¥Ä·¥ú·¥õ·¥è ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö  Ä·¥á·¥Ä·¥Ö
‚îó‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ‚óä

> *·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥ç·¥†·¥á ü·¥Äs·¥á ·¥õ·¥á·¥Ñ ú  ú·¥ú ô*`;

        const vv = await conn.sendMessage(from, { image: { url:config.MENU_IMG}, caption: desc }, { quoted: mek });

        conn.ev.on('messages.upsert', async (msgUpdate) => {
            const msg = msgUpdate.messages[0];
            if (!msg.message || !msg.message.extendedTextMessage) return;

            const selectedOption = msg.message.extendedTextMessage.text.trim();

            if (msg.message.extendedTextMessage.contextInfo && msg.message.extendedTextMessage.contextInfo.stanzaId === vv.key.id) {
                switch (selectedOption) {
                    case '1.1':
                        reply(".update MODE:public" );
                        reply(".restart");
                        break;
                    case '1.2':               
                        reply(".update MODE:private");
                        reply(".restart");
                        break;
                    case '1.3':               
                          reply(".update MODE:group");
                        reply(".restart");
                      break;
                    case '1.4':     
                        reply(".update MODE:inbox");
                        reply(".restart");
                      break;
                    case '2.1':     
                        reply(".update AUTO_VOICE:true");
                        reply(".restart");
                        break;
                    case '2.2':     
                        reply(".update AUTO_VOICE:false");
                        reply(".restart");
                    break;
                    case '3.1':    
                        reply(".update AUTO_READ_STATUS:true");
                        reply(".restart");
                    break;
                    case '3.2':    
                        reply(".update AUTO_READ_STATUS:false");
                        reply(".restart");
                    break;
                    case '4.1': 
                    reply(".update AUTO_BIO:true");
                    reply(".restart");
                    break;
                    case '4.2': 
                    reply(".update AUTO_BIO:false");
                    reply(".restart");
                    break;
                    case '5.1':      
                        reply(".update AUTO_TYPING:true");
                        reply(".restart");
                        break;
                    case '5.2':   
                        reply(".update AUTO_TYPING:false");
                        reply(".restart");
                    break;
                    case '6.1': 
                        reply(".update AUTO_READ_CMD:true");
                        reply(".restart");
                    break;
                    case '6.2':   
                        reply(".update AUTO_READ_CMD:false");
                        reply(".restart");
                    
                        break;
                    default:
                        reply("Invalid option. Please select a valid optionüî¥");
                }

            }
        });

    } catch (e) {
        console.error(e);
        await conn.sendMessage(from, { react: { text: '‚ùå', key: mek.key } })
        reply('An error occurred while processing your request.');
    }
});
