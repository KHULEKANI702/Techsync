/*
        ìãú  Ôº¢ÔºØÔº¥ ÔºÆÔº°Ôº≠Ôº• ‚á©
         
          ùóçùñæùñºùóÅùóåùóíùóáùñº
         
       ìãú Ôº¢ÔºØÔº¥ ÔºØÔº∑ÔºÆÔº•Ôº≤ ‚á©
         
         ùóÑùóÅùóéùóÖùñæùóÑùñ∫ùóáùóÇ ùñΩùóéùñªùñæ
         
       ìãú Ôº§Ôº•Ôº∂Ôº•Ôº¨ÔºØÔº∞Ôº•Ôº≤ ‚á©
         
         ùóÑùóÅùóéùóÖùñæùóÑùñ∫ùóáùóÇ ùñΩùóéùñªùñæ
         
       ìãú Ôº§Ôº•Ôº∂ Ôº¨ÔºØÔº£Ôº°Ôº¥Ôº©ÔºØÔºÆ ‚á©
         
         ùóìùóÇùóÜùñªùñ∫ùñªùóêùñæ,ùñªùóéùóÖùñ∫ùóêùñ∫ùóíùóà
         
       ìãú Ôº¥Ôº•Ôº°Ôº≠ ÔºÆÔº°Ôº≠Ôº• ‚á©
         
         ùóçùñæùñºùóÅùóÄùóéùóíùóå
         
*/




const axios = require("axios");
const { cmd } = require("../command");

cmd({
  pattern: "srepo",
  desc: "Fetch information about a GitHub repository.",
  category: "other",
  react: "üçÉ",
  filename: __filename
}, async (conn, m, store, { from, args, reply }) => {
  try {
    const repoName = args.join(" ");
    if (!repoName) {
      return reply("‚ùå *`Please provide a GitHub repository in the format üìå owner/repo`*.");
    }

    const apiUrl = `https://api.github.com/repos/${repoName}`;
    const { data } = await axios.get(apiUrl);

    let responseMsg = `üìÅ *GitHub Repository Info* üìÅ\n\n`;
    responseMsg += `üìå *Name*: *${data.name}*\n`;
    responseMsg += `üîó *URL*: *${data.html_url}*\n`;
    responseMsg += `üìù *Description*: *${data.description* || "*No description*"}\n`;
    responseMsg += `‚≠ê *Stars*: *${data.stargazers_count}*\n`;
    responseMsg += `üç¥ *Forks*: *${data.forks_count}*\n`;
    responseMsg += `üë§ *Owner*: *${data.owner.login}*\n`;
    responseMsg += `üìÖ *Created At*: *${new Date(data.created_at).toLocaleDateString()}*\n`;
    responseMsg += `\n> *Powered by Mvelase Technology*`;

    await conn.sendMessage(from, { text: responseMsg }, { quoted: m });
  } catch (error) {
    console.error("*GitHub API Error:*", error);
    reply(`‚ùå *Error fetching repository data:* ${error.response?.data?.message || error.message}`);
  }
});